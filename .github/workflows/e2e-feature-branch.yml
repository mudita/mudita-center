name: e2e (standalone) for feature branch

on:
  push:
    branches:
      - CP-*
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [Linux, macOS, Windows]
        node-version: [22]
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Find open port for ChromeBrowser on Linux/Mac
        if: matrix.os != 'Windows'
        id: find-port-unix
        run: |
          START_PORT=30000
          END_PORT=40000
          PORT=$START_PORT
          RUNNER_OS="${{ matrix.os }}"
          while [ $PORT -le $END_PORT ]; do
            if [[ "$RUNNER_OS" == "Linux" ]]; then
              nc -z 127.0.0.1 $PORT 2>/dev/null || break
            elif [[ "$RUNNER_OS" == "macOS" ]]; then
              nc -z -w1 127.0.0.1 $PORT 2>/dev/null || break
            fi
            PORT=$((PORT+1))
          done
          if [ $PORT -gt $END_PORT ]; then
            echo "No available port found in the range $START_PORT-$END_PORT" >&2
            exit 1
          fi
          echo "CHROME_OPEN_PORT=$PORT" >> $GITHUB_ENV
      - name: Find open port for ChromeBrowser on Windows
        if: matrix.os == 'Windows'
        id: find-port-windows
        run: |
          $startPort = 30000
          $endPort = 40000
          $port = $startPort
          while ($port -le $endPort) {
            $isUsed = (Test-NetConnection -ComputerName 127.0.0.1 -Port $port).TcpTestSucceeded
            if (-not $isUsed) {
              break
            }
            $port++
          }
          if ($port -gt $endPort) {
            Write-Error "No available port found in the range $startPort-$endPort"
            exit 1
          }
          echo "CHROME_OPEN_PORT=$port" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
      - name: Setup Env for Windows
        if: matrix.os == 'Windows'
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.MC_GITHUB_ACCESS_TOKEN }}
          FONTS_DIRECTORY_URL: ${{ secrets.FONTS_DIRECTORY_URL }}
          VITE_MUDITA_CENTER_SERVER_URL: ${{ secrets.MUDITA_CENTER_SERVER_URL }}
          CI: true
        shell: cmd
        run: |
          SET > .env
          jq -r -j .version apps/app/package.json > apps/app/version
      - name: Setup Env for Mac
        if: matrix.os == 'macOS'
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.MC_GITHUB_ACCESS_TOKEN }}
          FONTS_DIRECTORY_URL: ${{ secrets.FONTS_DIRECTORY_URL }}
          VITE_MUDITA_CENTER_SERVER_URL: ${{ secrets.MUDITA_CENTER_SERVER_URL }}
          CI: true
        run: |
          printenv > .env
      - name: Setup Env for Linux
        if: matrix.os == 'Linux'
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.MC_GITHUB_ACCESS_TOKEN }}
          FONTS_DIRECTORY_URL: ${{ secrets.FONTS_DIRECTORY_URL }}
          VITE_MUDITA_CENTER_SERVER_URL: ${{ secrets.MUDITA_CENTER_SERVER_URL }}
          CI: true
        run: |
          printenv > .env
      - name: Changing app version in packages.json for Linux
        if: matrix.os == 'Linux'
        run: |
          export APP_VERSION=`cat apps/app/package.json | jq -r .version`
          export SOURCE_BRANCH=${{ github.ref_name }}
          export "ENVIRONMENT_CATALOG_NAME=feature-branch/${{ github.ref_name }}"
          export "BUILD_VERSION=-dev.${{ github.run_number }}"
          sed -i "s/\"version\": \".*\",/\"version\": \"$APP_VERSION$BUILD_VERSION\",/" apps/app/package.json
      - name: Changing app version in packages.json for Mac
        if: matrix.os == 'macOS'
        run: |
          export APP_VERSION=`cat apps/app/package.json | jq -r .version`
          export SOURCE_BRANCH=${{ github.ref_name }}
          export "ENVIRONMENT_CATALOG_NAME=feature-branch/${{ github.ref_name }}"
          export "BUILD_VERSION=-dev.${{ github.run_number }}"
          sed -i '' "s/\"version\": \".*\",/\"version\": \"$APP_VERSION$BUILD_VERSION\",/" apps/app/package.json
      - name: Changing app version in packages.json for Windows
        if: matrix.os == 'Windows'
        run: |
          $SOURCE_BRANCH = "${{ github.ref_name }}"
          $ENVIRONMENT_CATALOG_NAME = "feature-branch/${{ github.ref_name }}"
          $BUILD_VERSION = "-dev.${{ github.run_number }}"
          $APP_VERSION = (Get-Content -Path "apps/app/version") + $BUILD_VERSION
          (Get-Content -Path 'apps/app/package.json') | ForEach-Object {
            $_ -replace '"version": ".*",' , "`"version`"`: `"$APP_VERSION`","
          } | Set-Content -Path 'apps/app/package.json'
      - name: Setup dependencies
        run: npm run setup
      - name: Copy electron-builder environment file for Linux/Mac
        if: matrix.os != 'Windows'
        run: |
          cp ~/actions-runner/envs/electron-builder.env apps/app/electron-builder.env
      - name: Build App for Windows
        if: matrix.os == 'Windows'
        run: |
          $env:NODE_OPTIONS="--max-old-space-size=4096"
          $env:LOCALAPPDATA=""
          npx nx build:win app dir --output-style stream --no-cloud
      - name: Build App for Mac
        if: matrix.os == 'macOS'
        run: |
          export NODE_OPTIONS="--max-old-space-size=4096"
          npx nx build:mac app dir --universal --output-style stream --no-cloud
      - name: Build App for Linux
        if: matrix.os == 'Linux'
        run: |
          export NODE_OPTIONS="--max-old-space-size=4096"
          npx nx build:linux app dir --output-style stream --no-cloud
      - name: Run e2e tests for Linux
        if: matrix.os == 'Linux'
        run: xvfb-run --auto-servernum --server-args='-screen 0 1024x768x24' npx nx start app-e2e --no-cloud --output-style stream
        shell: bash
      - name: Run e2e tests for Mac/Windows
        if: matrix.os != 'Linux'
        run: npx nx start app-e2e --no-cloud --output-style stream

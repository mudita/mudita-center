name: Build & deploy to development

on:
  push:
    branches:
      - develop
      - CP-*
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [Linux, Windows, macOS]
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14.17.3
      - name: Setup Env for Windows
        if: matrix.os == 'Windows'
        env:
          PHRASE_API_KEY: ${{ secrets.PHRASE_API_KEY }}
          PHRASE_API_URL: ${{ secrets.PHRASE_API_URL }}
          PHRASE_API_KEY_DEV: ${{ secrets.PHRASE_API_KEY_DEV }}
          MUDITA_CENTER_SERVER_URL: ${{ secrets.MUDITA_CENTER_SERVER_URL }}
          ROLLBAR_TOKEN: ${{ secrets.ROLLBAR_TOKEN }}
          RELEASES_REPOSITORY_NAME: ${{ secrets.RELEASES_REPOSITORY_NAME }}
          PRERELEASES_ENABLED: ${{ secrets.PRERELEASES_ENABLED }}
          GITHUB_ACCESS_TOKEN: ${{ secrets.MC_GITHUB_ACCESS_TOKEN }}
          LOGIN_MICROSOFT_ONLINE_CLIENT_ID: ${{ secrets.LOGIN_MICROSOFT_ONLINE_CLIENT_ID }}
          FONTS_DIRECTORY_URL: ${{ secrets.FONTS_DIRECTORY_URL }}
          FRESHDESK_API_URL: ${{ secrets.FRESHDESK_API_URL }}
          FRESHDESK_API_TOKEN: ${{ secrets.FRESHDESK_API_TOKEN }}
          ANALYTICS_ENABLED: ${{ secrets.ANALYTICS_ENABLED }}
          ANALYTICS_API_URL: ${{ secrets.ANALYTICS_API_URL }}
          ANALYTICS_API_SITE_ID: ${{ secrets.ANALYTICS_API_SITE_ID }}
          FEATURE_TOGGLE_ENVIRONMENT: ${{ secrets.FEATURE_TOGGLE_ENVIRONMENT }}
          STATIC_CONFIGURATION_FILE_PATH: ${{ secrets.STATIC_CONFIGURATION_FILE_PATH }}
          DEV_REDUX_LOGGER_ENABLED: ${{ secrets.DEV_REDUX_LOGGER_ENABLED }}
          DEV_DEVICE_LOGGER_ENABLED: ${{ secrets.DEV_DEVICE_LOGGER_ENABLED }}
          FEATURE_TOGGLE_RELEASE_ENVIRONMENT: ${{ secrets.FEATURE_TOGGLE_RELEASE_ENVIRONMENT }}
          MUDITA_CENTER_PRERELEASE_ENABLED: ${{ secrets.MUDITA_CENTER_PRERELEASE_ENABLED }}
        shell: cmd
        run: |
          SET > .env
          jq -r -j .version packages/app/package.json > packages/app/version
      - name: Changing app version in packages.json for Windows
        if: matrix.os == 'Windows'
        run: |
          $APP_VERSION = Get-Content -Path "packages/app/version"
          $SOURCE_BRANCH = "${{ github.ref_name }}"
          if ($SOURCE_BRANCH -eq "develop") {
              $ENVIRONMENT_CATALOG_NAME = "development"
              $BUILD_VERSION = "-dev.${{ github.run_number }}"
          } else {
              $ENVIRONMENT_CATALOG_NAME = "feature-branch/${{ github.ref_name }}"
              $BUILD_VERSION = ".${{ github.run_number }}"
          }
          (Get-Content -Path 'packages/app/package.json') | ForEach-Object {
            $_ -replace '"version": ".*",' , "`"version`"`: `"$APP_VERSION$BUILD_VERSION`","
          } | Set-Content -Path 'packages/app/package.json'
      - name: Setup Env for Mac
        if: matrix.os == 'macOS'
        env:
          PHRASE_API_KEY: ${{ secrets.PHRASE_API_KEY }}
          PHRASE_API_URL: ${{ secrets.PHRASE_API_URL }}
          PHRASE_API_KEY_DEV: ${{ secrets.PHRASE_API_KEY_DEV }}
          MUDITA_CENTER_SERVER_URL: ${{ secrets.MUDITA_CENTER_SERVER_URL }}
          ROLLBAR_TOKEN: ${{ secrets.ROLLBAR_TOKEN }}
          RELEASES_REPOSITORY_NAME: ${{ secrets.RELEASES_REPOSITORY_NAME }}
          PRERELEASES_ENABLED: ${{ secrets.PRERELEASES_ENABLED }}
          GITHUB_ACCESS_TOKEN: ${{ secrets.MC_GITHUB_ACCESS_TOKEN }}
          LOGIN_MICROSOFT_ONLINE_CLIENT_ID: ${{ secrets.LOGIN_MICROSOFT_ONLINE_CLIENT_ID }}
          FONTS_DIRECTORY_URL: ${{ secrets.FONTS_DIRECTORY_URL }}
          FRESHDESK_API_URL: ${{ secrets.FRESHDESK_API_URL }}
          FRESHDESK_API_TOKEN: ${{ secrets.FRESHDESK_API_TOKEN }}
          ANALYTICS_ENABLED: ${{ secrets.ANALYTICS_ENABLED }}
          ANALYTICS_API_URL: ${{ secrets.ANALYTICS_API_URL }}
          ANALYTICS_API_SITE_ID: ${{ secrets.ANALYTICS_API_SITE_ID }}
          FEATURE_TOGGLE_ENVIRONMENT: ${{ secrets.FEATURE_TOGGLE_ENVIRONMENT }}
          STATIC_CONFIGURATION_FILE_PATH: ${{ secrets.STATIC_CONFIGURATION_FILE_PATH }}
          DEV_REDUX_LOGGER_ENABLED: ${{ secrets.DEV_REDUX_LOGGER_ENABLED }}
          DEV_DEVICE_LOGGER_ENABLED: ${{ secrets.DEV_DEVICE_LOGGER_ENABLED }}
          FEATURE_TOGGLE_RELEASE_ENVIRONMENT: ${{ secrets.FEATURE_TOGGLE_RELEASE_ENVIRONMENT }}
          MUDITA_CENTER_PRERELEASE_ENABLED: ${{ secrets.MUDITA_CENTER_PRERELEASE_ENABLED }}
        run: |
          printenv > .env
          export APP_VERSION=`cat packages/app/package.json | jq -r .version`
          export SOURCE_BRANCH=${{ github.ref_name }}
          if [[ $SOURCE_BRANCH == "develop" ]] || [[ $SOURCE_BRANCH == "nexus-runner" ]] ; then
            export ENVIVORMENT_CATALOG_NAME=development
            export "BUILD_VERSION=-dev.${{ github.run_number }}"
          else
            export "ENVIVORMENT_CATALOG_NAME=feature-branch/${{ github.ref_name }}"
            export "BUILD_VERSION=.${{ github.run_number }}"
          fi
          sed -i '' "s/\"version\": \".*\",/\"version\": \"$APP_VERSION$BUILD_VERSION\",/" packages/app/package.json
      - name: Setup Env for Linux
        if: matrix.os == 'Linux'
        env:
          PHRASE_API_KEY: ${{ secrets.PHRASE_API_KEY }}
          PHRASE_API_URL: ${{ secrets.PHRASE_API_URL }}
          PHRASE_API_KEY_DEV: ${{ secrets.PHRASE_API_KEY_DEV }}
          MUDITA_CENTER_SERVER_URL: ${{ secrets.MUDITA_CENTER_SERVER_URL }}
          ROLLBAR_TOKEN: ${{ secrets.ROLLBAR_TOKEN }}
          RELEASES_REPOSITORY_NAME: ${{ secrets.RELEASES_REPOSITORY_NAME }}
          PRERELEASES_ENABLED: ${{ secrets.PRERELEASES_ENABLED }}
          GITHUB_ACCESS_TOKEN: ${{ secrets.MC_GITHUB_ACCESS_TOKEN }}
          LOGIN_MICROSOFT_ONLINE_CLIENT_ID: ${{ secrets.LOGIN_MICROSOFT_ONLINE_CLIENT_ID }}
          FONTS_DIRECTORY_URL: ${{ secrets.FONTS_DIRECTORY_URL }}
          FRESHDESK_API_URL: ${{ secrets.FRESHDESK_API_URL }}
          FRESHDESK_API_TOKEN: ${{ secrets.FRESHDESK_API_TOKEN }}
          ANALYTICS_ENABLED: ${{ secrets.ANALYTICS_ENABLED }}
          ANALYTICS_API_URL: ${{ secrets.ANALYTICS_API_URL }}
          ANALYTICS_API_SITE_ID: ${{ secrets.ANALYTICS_API_SITE_ID }}
          FEATURE_TOGGLE_ENVIRONMENT: ${{ secrets.FEATURE_TOGGLE_ENVIRONMENT }}
          STATIC_CONFIGURATION_FILE_PATH: ${{ secrets.STATIC_CONFIGURATION_FILE_PATH }}
          DEV_REDUX_LOGGER_ENABLED: ${{ secrets.DEV_REDUX_LOGGER_ENABLED }}
          DEV_DEVICE_LOGGER_ENABLED: ${{ secrets.DEV_DEVICE_LOGGER_ENABLED }}
          FEATURE_TOGGLE_RELEASE_ENVIRONMENT: ${{ secrets.FEATURE_TOGGLE_RELEASE_ENVIRONMENT }}
          MUDITA_CENTER_PRERELEASE_ENABLED: ${{ secrets.MUDITA_CENTER_PRERELEASE_ENABLED }}
        run: |
          printenv > .env
          export APP_VERSION=`cat packages/app/package.json | jq -r .version`
          export SOURCE_BRANCH=${{ github.ref_name }}
          if [[ $SOURCE_BRANCH == "develop" ]] || [[ $SOURCE_BRANCH == "nexus-runner" ]] ; then
            export ENVIVORMENT_CATALOG_NAME=development
            export "BUILD_VERSION=-dev.${{ github.run_number }}"
          else
            export "ENVIVORMENT_CATALOG_NAME=feature-branch/${{ github.ref_name }}"
            export "BUILD_VERSION=.${{ github.run_number }}"
          fi
          sed -i "s/\"version\": \".*\",/\"version\": \"$APP_VERSION$BUILD_VERSION\",/" packages/app/package.json
      - name: Setup depedencies
        run: npm run setup
      - name: Copy electron-builder environment file for Windows
        if: matrix.os == 'Windows'
        run: |
          copy C:\actions-runner\envs\electron-builder.env packages/app/electron-builder.env
      - name: Copy electron-builder environment file for Linux/Mac
        if: matrix.os != 'Windows'
        run: |
          cp ~/actions-runner/envs/electron-builder.env packages/app/electron-builder.env
      - name: Build App for Windows
        if: matrix.os == 'Windows'
        run: |
          $env:NODE_OPTIONS="--max-old-space-size=4096"
          cd packages/app/
          npm run dist:prod:all
      - name: Build App for Linux/Mac
        if: matrix.os != 'Windows'
        run: |
          export NODE_OPTIONS="--max-old-space-size=4096"
          cd packages/app/
          npm run dist:prod:all
      - name: Push artifacts to nexus registry from Windows
        if: matrix.os == 'Windows'
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: |
          $APP_VERSION = Get-Content -Path "packages/app/version"
          $SOURCE_BRANCH = "${{ github.ref_name }}"
          if ($SOURCE_BRANCH -eq "develop") {
              $ENVIRONMENT_CATALOG_NAME = "development"
          } else {
              $ENVIRONMENT_CATALOG_NAME = "feature-branch/${{ github.ref_name }}"
          }
          echo "GITTAG=$($APP_VERSION)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $GITTAG = "$($APP_VERSION)"
          $NEXUS_USERNAME = "$env:NEXUS_USERNAME"
          $NEXUS_PASSWORD = ConvertTo-SecureString "$env:NEXUS_PASSWORD" -AsPlainText -Force  
          $AUTH = New-Object System.Management.Automation.PSCredential ($NEXUS_USERNAME, $NEXUS_PASSWORD)
          copy ./packages/app/release/builder-debug.yml ./packages/app/release/builder-debug-win.yml
          Invoke-WebRequest -Uri https://nexus.mudita.com/repository/mudita-center/releases/$ENVIRONMENT_CATALOG_NAME/$($APP_VERSION)/Mudita-Center.exe -InFile ./packages/app/release/Mudita-Center.exe -Method Put -Credential $AUTH
          Invoke-WebRequest -Uri https://nexus.mudita.com/repository/mudita-center/releases/$ENVIRONMENT_CATALOG_NAME/$($APP_VERSION)/Mudita-Center.exe.blockmap -InFile ./packages/app/release/Mudita-Center.exe.blockmap -Method Put -Credential $AUTH
          Invoke-WebRequest -Uri https://nexus.mudita.com/repository/mudita-center/releases/$ENVIRONMENT_CATALOG_NAME/$($APP_VERSION)/latest.yml -InFile ./packages/app/release/latest.yml -Method Put -Credential $AUTH
          Invoke-WebRequest -Uri https://nexus.mudita.com/repository/mudita-center/releases/$ENVIRONMENT_CATALOG_NAME/$($APP_VERSION)/builder-debug-win.yml -InFile ./packages/app/release/builder-debug-win.yml -Method Put -Credential $AUTH
          C:\"Program Files"\Git\cmd\git.exe clone https://${{ secrets.MC_GITHUB_ACCESS_TOKEN }}@github.com/mudita/mudita-center-internal-releases.git
          cd mudita-center-internal-releases
          C:\"Program Files"\Git\cmd\git.exe tag "$GITTAG"
          C:\"Program Files"\Git\cmd\git.exe push origin "$GITTAG"
      - name: Push artifacts to nexus registry from Linux
        if: matrix.os == 'Linux'
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: |
          export APP_VERSION=`cat packages/app/package.json | jq -r .version`
          export SOURCE_BRANCH=${{ github.ref_name }}
          if [[ $SOURCE_BRANCH == "develop" ]]; then
            export ENVIVORMENT_CATALOG_NAME=development
          else
            export "ENVIVORMENT_CATALOG_NAME=feature-branch/${{ github.ref_name }}"
          fi
          echo "GITTAG=$APP_VERSION" >> $GITHUB_ENV
          export GITTAG="$APP_VERSION"
          git tag "$GITTAG"
          git push origin "$GITTAG"
          cp ./packages/app/release/builder-debug.yml ./packages/app/release/builder-debug-linux.yml
          curl -v -u $NEXUS_USERNAME:$NEXUS_PASSWORD --upload-file ./packages/app/release/Mudita-Center.AppImage  https://nexus.mudita.com/repository/mudita-center/releases/$ENVIVORMENT_CATALOG_NAME/$APP_VERSION/Mudita-Center.AppImage
          curl -v -u $NEXUS_USERNAME:$NEXUS_PASSWORD --upload-file ./packages/app/release/latest-linux.yml  https://nexus.mudita.com/repository/mudita-center/releases/$ENVIVORMENT_CATALOG_NAME/$APP_VERSION/latest-linux.yml
          curl -v -u $NEXUS_USERNAME:$NEXUS_PASSWORD --upload-file ./packages/app/release/builder-debug-linux.yml  https://nexus.mudita.com/repository/mudita-center/releases/$ENVIVORMENT_CATALOG_NAME/$APP_VERSION/builder-debug-linux.yml
          git clone https://${{ secrets.MC_GITHUB_ACCESS_TOKEN }}@github.com/mudita/mudita-center-internal-releases.git
          cd mudita-center-internal-releases
          git tag "$GITTAG" 2>&1 || true
          git push origin "$GITTAG"
      - name: Push artifacts to nexus registry from macOS
        if: matrix.os == 'macOS'
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: |
          export APP_VERSION=`cat packages/app/package.json | jq -r .version`
          export SOURCE_BRANCH=${{ github.ref_name }}
          if [[ $SOURCE_BRANCH == "develop" ]]; then
            export ENVIVORMENT_CATALOG_NAME=development
          else
            export "ENVIVORMENT_CATALOG_NAME=feature-branch/${{ github.ref_name }}"
          fi
          echo "GITTAG=$APP_VERSION" >> $GITHUB_ENV
          export GITTAG="$APP_VERSION"
          git tag "$GITTAG"
          git push origin "$GITTAG"
          cp ./packages/app/release/builder-debug.yml ./packages/app/release/builder-debug-mac.yml
          curl -v -u $NEXUS_USERNAME:$NEXUS_PASSWORD --upload-file ./packages/app/release/Mudita-Center.dmg  https://nexus.mudita.com/repository/mudita-center/releases/$ENVIVORMENT_CATALOG_NAME/$APP_VERSION/Mudita-Center.dmg
          curl -v -u $NEXUS_USERNAME:$NEXUS_PASSWORD --upload-file ./packages/app/release/Mudita-Center.zip  https://nexus.mudita.com/repository/mudita-center/releases/$ENVIVORMENT_CATALOG_NAME/$APP_VERSION/Mudita-Center.zip
          curl -v -u $NEXUS_USERNAME:$NEXUS_PASSWORD --upload-file ./packages/app/release/Mudita-Center.zip.blockmap  https://nexus.mudita.com/repository/mudita-center/releases/$ENVIVORMENT_CATALOG_NAME/$APP_VERSION/Mudita-Center.zip.blockmap
          curl -v -u $NEXUS_USERNAME:$NEXUS_PASSWORD --upload-file ./packages/app/release/Mudita-Center.dmg.blockmap  https://nexus.mudita.com/repository/mudita-center/releases/$ENVIVORMENT_CATALOG_NAME/$APP_VERSION/Mudita-Center.dmg.blockmap
          curl -v -u $NEXUS_USERNAME:$NEXUS_PASSWORD --upload-file ./packages/app/release/latest-mac.yml  https://nexus.mudita.com/repository/mudita-center/releases/$ENVIVORMENT_CATALOG_NAME/$APP_VERSION/latest-mac.yml
          curl -v -u $NEXUS_USERNAME:$NEXUS_PASSWORD --upload-file ./packages/app/release/builder-debug-mac.yml  https://nexus.mudita.com/repository/mudita-center/releases/$ENVIVORMENT_CATALOG_NAME/$APP_VERSION/builder-debug-mac.yml
          git clone https://${{ secrets.MC_GITHUB_ACCESS_TOKEN }}@github.com/mudita/mudita-center-internal-releases.git
          cd mudita-center-internal-releases
          git tag "$GITTAG" 2>&1 || true
          git push origin "$GITTAG"
      - name: Create draft release with Windows files
        if: matrix.os == 'Windows'
        id: create_release_windows
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.GITTAG }}
          name: Mudita Center v${{ env.GITTAG }}
          repository: mudita/mudita-center-internal-releases
          token: ${{ secrets.MC_GITHUB_ACCESS_TOKEN }}
          draft: true
          files: |
            ./packages/app/release/Mudita-Center.exe
            ./packages/app/release/Mudita-Center.exe.blockmap
            ./packages/app/release/latest.yml
            ./packages/app/release/builder-debug-win.yml
      - name: Create draft release with Linux files
        if: matrix.os == 'Linux'
        id: create_release_linux
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.GITTAG }}
          name: Mudita Center v${{ env.GITTAG }}
          repository: mudita/mudita-center-internal-releases
          token: ${{ secrets.MC_GITHUB_ACCESS_TOKEN }}
          draft: true
          files: |
            ./packages/app/release/Mudita-Center.AppImage
            ./packages/app/release/latest-linux.yml
            ./packages/app/release/builder-debug-linux.yml
      - name: Create draft release with Mac files
        if: matrix.os == 'macOS'
        id: create_release_macos
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.GITTAG }}
          name: Mudita Center v${{ env.GITTAG }}
          repository: mudita/mudita-center-internal-releases
          token: ${{ secrets.MC_GITHUB_ACCESS_TOKEN }}
          draft: true
          files: |
            ./packages/app/release/Mudita-Center.dmg
            ./packages/app/release/Mudita-Center.zip
            ./packages/app/release/Mudita-Center.zip.blockmap
            ./packages/app/release/Mudita-Center.dmg.blockmap
            ./packages/app/release/latest-mac.yml
            ./packages/app/release/builder-debug-mac.yml